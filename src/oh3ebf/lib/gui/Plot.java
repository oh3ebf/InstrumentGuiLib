/***********************************************************
 * Software: instrument gui library
 * Module:   graphical plot drawing base class
 * Version:  0.1
 * Licence:  GPL2
 *
 * Owner: Kim Kristo
 * Date creation : 3.9.2012
 *
 ***********************************************************/

package oh3ebf.lib.gui;

import oh3ebf.lib.gui.primitives.DrawingObject;
import oh3ebf.lib.gui.primitives.WaveForm;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JPanel;

public class Plot extends JPanel {
    protected BufferedImage hiddenImage;  
    protected Graphics2D hiddenG;
    protected ArrayList<DrawingObject> drawingItems;
    protected Color waveColors[] = {Color.magenta, Color.red, Color.blue, Color.orange};
    protected Color bgColor = new java.awt.Color(0, 102, 102);
    protected Vector<WaveForm> waves;
    
    /** Creates a new instance of Plot */
    public Plot()  {
        drawingItems = new ArrayList<DrawingObject>();
        //storage for waveforms
        waves = new Vector<WaveForm>();
        
        // set default background
        setBackground(bgColor);
        
        initComponents();                
    }
    
    /** Function sets size of component
     *
     * @param size component size in dimension format
     *
     */
    
    @Override
    public void setSize(Dimension size) {
        super.setSize(size);
        
        // just save some code and call other function
        this.setSize(size.width, size.height);
    }
    
    /** Function sets size of component
     *
     * @param width component total width
     * @param heigth component total heigth
     *
     */
    
    @Override
    public void setSize(int width, int heigth) {
        super.setSize(width, heigth);
        
        // handle setting size for all drawing objects
        if(!drawingItems.isEmpty()) {
            Iterator item = drawingItems.iterator();
            while(item.hasNext()) {
                // set new size
                ((DrawingObject)item.next()).setSize(getWidth(), getHeight());
            }            
        }
    }

    /** Function adds new drawing object to plot
     *
     * @param d new drawing object to add
     *
     */
    
    public void add(DrawingObject d) {        
        // add new drawing component
        d.setSize(getPreferredSize());
        drawingItems.add(d);
    }        
    
    /** Function removes drawing object from plot
     * 
     * @param index to object
     * 
     */
    
    public void delete(int index) {
        drawingItems.remove(index);
        repaint();
    }
    
    /** Function paints drawing objects to panel
     *
     * @param g gui graphics object from system
     *
     */
    
    @Override
    public void paintComponent(Graphics g) {
        // paint original object
        super.paintComponent(g);
        // get 2D graphics 
        Graphics2D g2 = (Graphics2D) g;
        
        if(hiddenImage == null) {
            // make new hidden image if missing
            makeOffscreenImage();
        } else {
            // set background color
            hiddenG.setColor(this.getBackground());
            // draw solid box
            hiddenG.fillRect(0, 0, hiddenImage.getWidth(), hiddenImage.getHeight());
            
            // handle painting all drawing objects
            if(!drawingItems.isEmpty()) {
                Iterator item = drawingItems.iterator();
                
                while(item.hasNext()) {
                    // paint to screen
                    ((DrawingObject)item.next()).draw(hiddenG);
                }                
            }
            // draw actual image to panel
            g2.drawImage(hiddenImage, 0, 0, null);
        }
    }
    
    /** Function creates of screen cache image
     *
     */
    
    private void makeOffscreenImage() {
        // create offscreen image
        Dimension d = this.getSize();
        // screen size validation
        if(d.width > 1 && d.height > 1) {
            hiddenImage = new BufferedImage(d.width, d.height, BufferedImage.TYPE_INT_RGB);
            
            // get its graphics
            hiddenG = (Graphics2D)hiddenImage.getGraphics();
            hiddenG.setColor(this.getBackground());
            hiddenG.fillRect(0, 0, getWidth(), getHeight());
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDoubleBuffered(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // scale image to new window size
        makeOffscreenImage();
        
        // handle resizing all drawing objects
        if(!drawingItems.isEmpty()) {
            Iterator item = drawingItems.iterator();
            while(item.hasNext()) {
                // set new size
                ((DrawingObject)item.next()).setSize(getWidth(), getHeight());
            }            
        }
        
        repaint();
    }//GEN-LAST:event_formComponentResized
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
